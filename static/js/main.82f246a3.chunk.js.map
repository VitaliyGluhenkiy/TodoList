{"version":3,"sources":["redux/actions/listActions.js","assets/img/close.svg","components/Badge/Badge.jsx","components/Sidebar/AddButtonList/AddButtonList.jsx","assets/img/add.svg","components/Tasks/AddNewTask.jsx","redux/actions/taskActions.js","assets/img/edit.svg","assets/img/remove.svg","components/Tasks/Tasks.jsx","components/Sidebar/List/List.jsx","App.js","redux/reducers/taskReducer.js","redux/reducers/listReducer.js","redux/combineReducer.js","redux/store.js","index.js"],"names":["deleteListItem","newList","type","data","Badge","color","onClick","className","classNames","AddButtonList","useState","visiblePopup","setVisiblePopup","selectedColor","selectColor","inputValue","setInputValue","isLoading","setIsLoading","dispatch","useDispatch","colors","useSelector","listReducer","useEffect","axios","get","then","setColors","onClose","id","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","value","onChange","e","target","placeholder","src","closeSvg","alt","map","item","name","post","colorId","tasks","filter","c","listItem","addListItem","finally","alert","AddNewTask","list","visibleInputForm","setVisibleInputForm","toggleFormVisible","obj","listId","text","completed","newTaskItem","catch","disabled","addSvg","Tasks","newTasks","taskReducer","task","console","log","setTasks","onChangeCheckbox","checked","style","hex","newTitle","window","prompt","payload","onEditTitle","penSvg","length","htmlFor","newTask","removeTaskItemAC","removeIcon","List","activeItem","onClickItem","lists","delay","ms","Promise","resolve","reject","setTimeout","a","active","icon","removeListItem","App","setActiveItem","history","useHistory","location","useLocation","setLists","pathname","split","find","Number","push","exact","path","SET_TASKS","REMOVE_TASK_ITEM_AC","ADD_NEW_TASKS_ITEM","SET_TASKS_LIST_DG","initialState","state","action","newTasksDG","SET_LISTS","SET_COLORS","ADD_LIST_ITEM","DELETE_LIST_ITEM","SET_TOGGLE_ITEM","ON_EDIT_TITLE","newLists","JSON","parse","stringify","index","findIndex","elem","editTitle","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82f246a3.chunk.js","sourcesContent":["export const setLists = lists => ({\r\n    type: 'SET_LISTS',\r\n    data: lists\r\n})\r\n\r\nexport const setColors = colors => ({\r\n    type: 'SET_COLORS',\r\n    colors\r\n})\r\n\r\nexport const addListItem = listItem => ({\r\n    type: 'ADD_LIST_ITEM',\r\n    listItem\r\n})\r\n\r\nexport const deleteListItem = newList => ({\r\n    type: 'DELETE_LIST_ITEM',\r\n    data: newList\r\n})\r\n\r\nexport const onEditTitle = (id, newTitle) => ({\r\n    type: 'ON_EDIT_TITLE',\r\n    payload: id,\r\n    newTitle\r\n})\r\n","export default __webpack_public_path__ + \"static/media/close.0563020f.svg\";","import React from 'react'\r\nimport './Badge.scss'\r\nimport classNames from 'classnames'\r\n\r\nconst Badge = ({ color, onClick, className }) => (\r\n    <i\r\n        onClick={onClick}\r\n        className={classNames(\r\n            'badge',\r\n            { [`badge--${color}`]: color },\r\n            className\r\n        )}\r\n    />\r\n)\r\n\r\nexport default Badge\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\n\r\nimport './AddButtonList.scss'\r\nimport closeSvg from '../../../assets/img/close.svg'\r\nimport Badge from '../../Badge/Badge'\r\nimport { addListItem, setColors } from '../../../redux/actions/listActions'\r\n\r\nconst AddButtonList = () => {\r\n    const [visiblePopup, setVisiblePopup] = useState(false)\r\n    const [selectedColor, selectColor] = useState('')\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { colors } = useSelector(({ listReducer }) => ({\r\n        colors: listReducer.colors\r\n    }))\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:3001/colors').then(({ data }) => {\r\n            dispatch(setColors(data))\r\n        })\r\n    }, [])\r\n\r\n    const onClose = () => {\r\n        setVisiblePopup(false)\r\n        selectColor(colors[0].id)\r\n        setInputValue('')\r\n    }\r\n\r\n    const addList = () => {\r\n        if (!inputValue) {\r\n            alert('Введите название списка')\r\n            return\r\n        }\r\n        setIsLoading(true)\r\n        axios\r\n            .post('http://localhost:3001/lists', {\r\n                name: inputValue,\r\n                colorId: selectedColor || '1',\r\n                tasks: []\r\n            })\r\n            .then(({ data }) => {\r\n                const color = colors.filter(c => c.id === selectedColor)[0].name\r\n                const listItem = { ...data, color: { name: color } }\r\n                dispatch(addListItem(listItem))\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n                onClose()\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-list\">\r\n            <div\r\n                className=\"add-list__openPopup\"\r\n                onClick={() => setVisiblePopup(true)}\r\n            >\r\n                <p>Добавить список</p>\r\n                <svg\r\n                    width=\"12\"\r\n                    height=\"12\"\r\n                    viewBox=\"0 0 16 16\"\r\n                    fill=\"none\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"list__icon-plus\"\r\n                >\r\n                    <path\r\n                        d=\"M8 1V15\"\r\n                        stroke=\"black\"\r\n                        strokeWidth=\"2\"\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                    />\r\n                    <path\r\n                        d=\"M1 8H15\"\r\n                        stroke=\"black\"\r\n                        strokeWidth=\"2\"\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                    />\r\n                </svg>\r\n            </div>\r\n            {visiblePopup && (\r\n                <div className=\"add-list__popup\">\r\n                    <div className=\"popup\">\r\n                        <input\r\n                            value={inputValue}\r\n                            onChange={e => setInputValue(e.target.value)}\r\n                            className=\"field\"\r\n                            type=\"text\"\r\n                            placeholder=\"Название списка\"\r\n                        />\r\n                        <div className=\"closeBlock\">\r\n                            <img onClick={onClose} src={closeSvg} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"colors\">\r\n                            {colors.map(item => (\r\n                                <Badge\r\n                                    onClick={() => selectColor(item.id)}\r\n                                    key={item.id}\r\n                                    color={item.name}\r\n                                    className={\r\n                                        selectedColor === item.id && 'active'\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                        <button onClick={addList} className=\"button\">\r\n                            {isLoading ? 'Добавляем...' : 'Добавить'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddButtonList\r\n","export default __webpack_public_path__ + \"static/media/add.23ef596b.svg\";","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from 'axios'\r\n\r\nimport { addNewTaskItem } from '../../redux/actions/taskActions'\r\nimport addSvg from '../../assets/img/add.svg'\r\n\r\nimport './Tasks.scss'\r\n\r\nconst AddNewTask = ({ list }) => {\r\n    const [visibleInputForm, setVisibleInputForm] = useState(false)\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const toggleFormVisible = () => {\r\n        setVisibleInputForm(!visibleInputForm)\r\n        setInputValue('')\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = () => {\r\n        const obj = {\r\n            listId: list.id,\r\n            text: inputValue,\r\n            completed: false\r\n        }\r\n        setIsLoading(true)\r\n        axios\r\n            .post('http://localhost:3001/tasks', obj)\r\n            .then(({ data }) => {\r\n                dispatch(addNewTaskItem(data))\r\n                toggleFormVisible()\r\n            })\r\n            .catch(() => {\r\n                alert('Ошибка при добавлении задачи')\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"tasks__form\">\r\n            {!visibleInputForm ? (\r\n                <div onClick={toggleFormVisible} className=\"tasks__form-new\">\r\n                    <img src={addSvg} alt=\"Add svg\" />\r\n                    <span>Добавить задачу</span>\r\n                </div>\r\n            ) : (\r\n                <div className=\"tasks__form-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={inputValue}\r\n                        onChange={e => setInputValue(e.target.value)}\r\n                    />\r\n                    <div className=\"buttons\">\r\n                        <button\r\n                            onClick={addTask}\r\n                            disabled={isLoading}\r\n                            className=\"button\"\r\n                        >\r\n                            {isLoading ? 'Добаляеться' : 'Добавить задачу'}\r\n                        </button>\r\n                        <button\r\n                            onClick={toggleFormVisible}\r\n                            className=\"cancelButton\"\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default AddNewTask\r\n","export const setTasks = tasks => ({\r\n    type: 'SET_TASKS',\r\n    data: tasks\r\n})\r\n\r\nexport const removeTaskItemAC = newTask => ({\r\n    type: 'REMOVE_TASK_ITEM_AC',\r\n    data: newTask\r\n})\r\n\r\nexport const addNewTaskItem = newTaskItem => ({\r\n    type: 'ADD_NEW_TASKS_ITEM',\r\n    newTaskItem\r\n})\r\nexport const setTasksListDG = newTasksDG => ({\r\n    type: 'SET_TASKS_LIST_DG',\r\n    newTasksDG\r\n})\r\n","export default __webpack_public_path__ + \"static/media/edit.5be2348c.svg\";","export default __webpack_public_path__ + \"static/media/remove.f6fba105.svg\";","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as axios from 'axios'\n\nimport { removeTaskItemAC, setTasks } from '../../redux/actions/taskActions'\nimport { onEditTitle } from '../../redux/actions/listActions'\nimport AddNewTask from './AddNewTask'\n\nimport penSvg from '../../assets/img/edit.svg'\nimport removeIcon from '../../assets/img/remove.svg'\n\nimport './Tasks.scss'\n\nconst Tasks = ({ list }) => {\n    const dispatch = useDispatch()\n\n    const { tasks } = useSelector(({ taskReducer }) => ({\n        tasks: taskReducer.tasks\n    }))\n\n    const newTasks = tasks.filter(task => task.listId === list.id)\n\n    console.log(newTasks)\n\n    const editNameTitle = () => {\n        const newTitle = window.prompt(\n            'Введите новое название задачи',\n            list.name\n        )\n        if (newTitle) {\n            dispatch(onEditTitle(list.id, newTitle))\n            axios\n                .patch(`http://localhost:3001/lists/${list.id}`, {\n                    name: newTitle\n                })\n                .catch(() => {\n                    alert('Запрос не удался')\n                })\n        }\n    }\n\n    const removeTaskItem = id => {\n        axios.delete(`http://localhost:3001/tasks/${id}`).then(({ data }) => {\n            const newTask = list.tasks.filter(task => task.id !== id)\n            dispatch(removeTaskItemAC(newTask))\n        })\n    }\n\n    useEffect(() => {\n        axios.get('http://localhost:3001/tasks').then(({ data }) => {\n            dispatch(setTasks(data))\n        })\n    }, [])\n\n    const onChangeCheckbox = e => {\n        console.log(e.target.checked)\n    }\n    return (\n        <div className=\"tasks\">\n            <div className=\"tasks__title-block\">\n                <h1\n                    className=\"tasks__title\"\n                    style={list.color && { color: list.color.hex }}\n                >\n                    {list.name}\n                </h1>\n                <img\n                    onClick={editNameTitle}\n                    className=\"penSvg\"\n                    src={penSvg}\n                    alt=\"EDIT\"\n                />\n            </div>\n\n            <div>{!list.tasks.length && <h2>Задачи отсутствуют</h2>}</div>\n            {newTasks.map(task => (\n                <div key={task.id} className=\"tasks__items\">\n                    <div className=\"checkbox\">\n                        <input\n                            onChange={onChangeCheckbox}\n                            id={`task-${task.id}`}\n                            type=\"checkbox\"\n                        />\n                        <label htmlFor={`task-${task.id}`}>\n                            <svg\n                                width=\"11\"\n                                height=\"8\"\n                                viewBox=\"0 0 11 8\"\n                                fill=\"none\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                                <path\n                                    d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"\n                                    stroke=\"#000\"\n                                    strokeWidth=\"1.5\"\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                />\n                            </svg>\n                        </label>\n                        <p>{task.text}</p>\n                        <div className=\"removeIcon\">\n                            <img\n                                onClick={() => removeTaskItem(task.id)}\n                                src={removeIcon}\n                                alt=\"Remove icon\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            ))}\n            <AddNewTask list={list} />\n        </div>\n    )\n}\n\nexport default Tasks\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport * as axios from 'axios'\nimport classNames from 'classnames'\n\nimport Badge from '../../Badge/Badge'\nimport removeIcon from '../../../assets/img/remove.svg'\nimport { deleteListItem } from '../../../redux/actions/listActions'\n\nimport './List.scss'\n\nconst List = ({ activeItem, onClickItem, lists }) => {\n    const dispatch = useDispatch()\n\n    function delay(ms) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve()\n            }, ms)\n        })\n    }\n\n    async function removeListItem(id) {\n        await delay(3000)\n        await axios.delete(`http://localhost:3001/lists/${id}`).then(() => {\n            const newList = lists.filter(list => list.id !== id)\n            dispatch(deleteListItem(newList))\n        })\n    }\n\n    return (\n        <ul className=\"list\">\n            {lists.map(list => (\n                <div key={list.id}>\n                    <li\n                        className={classNames(list.className, {\n                            active: list.active\n                                ? list.active\n                                : activeItem && activeItem.id === list.id\n                        })}\n                        onClick={onClickItem ? () => onClickItem(list) : null}\n                    >\n                        <i>\n                            {list.icon ? (\n                                list.icon\n                            ) : (\n                                <Badge color={list.color.name} />\n                            )}\n                        </i>\n                        <span>\n                            {list.name}\n                            {list.tasks && `(${list.tasks.length})`}\n                        </span>\n                        <img\n                            onClick={() => removeListItem(list.id)}\n                            src={removeIcon}\n                            alt=\"Remove icon\"\n                        />\n                    </li>\n                </div>\n            ))}\n        </ul>\n    )\n}\n\nexport default List\n","import React, { useEffect, useState } from 'react'\nimport { Route, useHistory, useLocation } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { setLists } from './redux/actions/listActions'\nimport axios from 'axios'\n\nimport './App.scss'\n\nimport AddButtonList from './components/Sidebar/AddButtonList/AddButtonList'\nimport Tasks from './components/Tasks/Tasks'\nimport List from './components/Sidebar/List/List'\n\nfunction App() {\n    const [activeItem, setActiveItem] = useState(null)\n\n    let history = useHistory()\n    let location = useLocation()\n\n    const { lists } = useSelector(({ listReducer }) => ({\n        lists: listReducer.lists\n    }))\n\n    const { tasks } = useSelector(({ taskReducer }) => ({\n        tasks: taskReducer.tasks\n    }))\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        axios\n            .get('http://localhost:3001/lists?_expand=color&_embed=tasks')\n            .then(({ data }) => {\n                dispatch(setLists(data))\n            })\n    }, [tasks])\n\n    useEffect(() => {\n        const listId = location.pathname.split('lists/')[1]\n        if (lists) {\n            const list = lists.find(list => list.id === Number(listId))\n            setActiveItem(list)\n        }\n    }, [lists, location.pathname])\n\n    return (\n        <div className=\"todo\">\n            <div className=\"todo__sidebar\">\n                <List\n                    onClickItem={list => {\n                        history.push('/')\n                    }}\n                    lists={[\n                        {\n                            active: !activeItem,\n                            icon: (\n                                <svg\n                                    width=\"18\"\n                                    height=\"18\"\n                                    viewBox=\"0 0 18 18\"\n                                    fill=\"none\"\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                >\n                                    <path\n                                        d=\"M12.96 8.10001H7.74001C7.24321 8.10001 7.20001 8.50231 7.20001 9.00001C7.20001 9.49771 7.24321 9.90001 7.74001 9.90001H12.96C13.4568 9.90001 13.5 9.49771 13.5 9.00001C13.5 8.50231 13.4568 8.10001 12.96 8.10001V8.10001ZM14.76 12.6H7.74001C7.24321 12.6 7.20001 13.0023 7.20001 13.5C7.20001 13.9977 7.24321 14.4 7.74001 14.4H14.76C15.2568 14.4 15.3 13.9977 15.3 13.5C15.3 13.0023 15.2568 12.6 14.76 12.6ZM7.74001 5.40001H14.76C15.2568 5.40001 15.3 4.99771 15.3 4.50001C15.3 4.00231 15.2568 3.60001 14.76 3.60001H7.74001C7.24321 3.60001 7.20001 4.00231 7.20001 4.50001C7.20001 4.99771 7.24321 5.40001 7.74001 5.40001ZM4.86001 8.10001H3.24001C2.74321 8.10001 2.70001 8.50231 2.70001 9.00001C2.70001 9.49771 2.74321 9.90001 3.24001 9.90001H4.86001C5.35681 9.90001 5.40001 9.49771 5.40001 9.00001C5.40001 8.50231 5.35681 8.10001 4.86001 8.10001ZM4.86001 12.6H3.24001C2.74321 12.6 2.70001 13.0023 2.70001 13.5C2.70001 13.9977 2.74321 14.4 3.24001 14.4H4.86001C5.35681 14.4 5.40001 13.9977 5.40001 13.5C5.40001 13.0023 5.35681 12.6 4.86001 12.6ZM4.86001 3.60001H3.24001C2.74321 3.60001 2.70001 4.00231 2.70001 4.50001C2.70001 4.99771 2.74321 5.40001 3.24001 5.40001H4.86001C5.35681 5.40001 5.40001 4.99771 5.40001 4.50001C5.40001 4.00231 5.35681 3.60001 4.86001 3.60001Z\"\n                                        fill=\"black\"\n                                    />\n                                </svg>\n                            ),\n                            name: 'Все задачи',\n                            id: 99\n                        }\n                    ]}\n                />\n                {lists ? (\n                    <List\n                        onClickItem={list => {\n                            setActiveItem(list)\n                            history.push(`/lists/${list.id}`)\n                        }}\n                        activeItem={activeItem}\n                        lists={lists}\n                    />\n                ) : (\n                    'Загрузка'\n                )}\n                <AddButtonList />\n            </div>\n\n            <div className=\"todo__tasks\">\n                <Route exact path=\"/\">\n                    {lists.map(list => (\n                        <Tasks key={list.id} list={list} />\n                    ))}\n                </Route>\n                {lists && activeItem && <Tasks list={activeItem} />}\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","const SET_TASKS = 'SET_TASKS'\r\nconst REMOVE_TASK_ITEM_AC = 'REMOVE_TASK_ITEM_AC'\r\nconst ADD_NEW_TASKS_ITEM = 'ADD_NEW_TASKS_ITEM'\r\nconst SET_TASKS_LIST_DG = 'SET_TASKS_LIST_DG'\r\n\r\nconst initialState = {\r\n    tasks: []\r\n}\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                tasks: action.data\r\n            }\r\n        case REMOVE_TASK_ITEM_AC:\r\n            return {\r\n                ...state,\r\n                tasks: action.data\r\n            }\r\n        case ADD_NEW_TASKS_ITEM:\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, action.newTaskItem]\r\n            }\r\n        case SET_TASKS_LIST_DG:\r\n            return {\r\n                ...state,\r\n                tasks: action.newTasksDG\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n","const SET_LISTS = 'SET_LISTS'\nconst SET_COLORS = 'SET_COLORS'\nconst ADD_LIST_ITEM = 'ADD_LIST_ITEM'\nconst DELETE_LIST_ITEM = 'DELETE_LIST_ITEM'\nconst SET_TOGGLE_ITEM = 'SET_TOGGLE_ITEM'\nconst ON_EDIT_TITLE = 'ON_EDIT_TITLE'\n\nconst initialState = {\n    lists: [],\n    colors: []\n}\n\nconst listReducer = (state = initialState, action) => {\n    const { type, payload } = action\n\n    switch (type) {\n        case SET_LISTS:\n            return {\n                ...state,\n                lists: action.data\n            }\n        case SET_COLORS:\n            return {\n                ...state,\n                colors: action.colors\n            }\n        case ADD_LIST_ITEM:\n            return {\n                ...state,\n                lists: [...state.lists, action.listItem]\n            }\n        case DELETE_LIST_ITEM: {\n            return {\n                ...state,\n                lists: action.data\n            }\n        }\n        case SET_TOGGLE_ITEM: {\n            const newLists = JSON.parse(JSON.stringify(state.lists))\n\n            const index = newLists.findIndex(elem => elem.id === payload.id)\n\n            newLists[index] = payload\n            return {\n                ...state,\n                lists: newLists\n            }\n        }\n        case ON_EDIT_TITLE:\n            const editTitle = state.lists.map(list => {\n                if (list.id === payload) {\n                    list.name = action.newTitle\n                }\n                return list\n            })\n\n            return {\n                ...state,\n                lists: editTitle\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default listReducer\n","import { combineReducers } from 'redux'\r\n\r\nimport taskReducer from './reducers/taskReducer'\r\nimport listReducer from './reducers/listReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    taskReducer,\r\n    listReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './combineReducer'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk)),\r\n)\r\n\r\nwindow.store = store\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './App.scss'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </React.StrictMode>\r\n    </Router>,\r\n    document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}